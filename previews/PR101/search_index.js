var documenterSearchIndex = {"docs":
[{"location":"UniversalFunctions/#Universal-Functions","page":"Universal Functions","title":"Universal Functions","text":"","category":"section"},{"location":"UniversalFunctions/","page":"Universal Functions","title":"Universal Functions","text":"UniversalFunctions.jl provides universal functions for SurfaceFluxes.jl. The functions are defined in src/UniversalFunctions.jl and the plots are generated in docs/src/plot_universal_functions.jl. Here, we reproduce some plots from literature, specifically from Gryanik et al. 2020, Businger 1971, and Bonan 2019. Note that Bonan uses the forms of phi and psi from Dyer and Hicks 1970; Dyer 1974; Brutsaert 1982, pp. 68–71; Garratt 1992, pp. 52–54. ","category":"page"},{"location":"UniversalFunctions/","page":"Universal Functions","title":"Universal Functions","text":"include(\"plot_universal_functions.jl\")","category":"page"},{"location":"UniversalFunctions/#Figs-1,2-(Gryanik)","page":"Universal Functions","title":"Figs 1,2 (Gryanik)","text":"","category":"section"},{"location":"UniversalFunctions/","page":"Universal Functions","title":"Universal Functions","text":"(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"UniversalFunctions/#Fig-3-(Gryanik)","page":"Universal Functions","title":"Fig 3 (Gryanik)","text":"","category":"section"},{"location":"UniversalFunctions/","page":"Universal Functions","title":"Universal Functions","text":"(Image: ) (Image: )","category":"page"},{"location":"UniversalFunctions/#Figs-1,2-(Businger)","page":"Universal Functions","title":"Figs 1,2 (Businger)","text":"","category":"section"},{"location":"UniversalFunctions/","page":"Universal Functions","title":"Universal Functions","text":"(Image: ) (Image: )","category":"page"},{"location":"UniversalFunctions/#Figs-1,2-(Bonan)","page":"Universal Functions","title":"Figs 1,2 (Bonan)","text":"","category":"section"},{"location":"UniversalFunctions/","page":"Universal Functions","title":"Universal Functions","text":"(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"References/#References","page":"References","title":"References","text":"","category":"section"},{"location":"References/","page":"References","title":"References","text":"","category":"page"},{"location":"SurfaceFluxes/#Surface-Fluxes","page":"Equations","title":"Surface Fluxes","text":"","category":"section"},{"location":"SurfaceFluxes/#Monin-Obukhov-Similarity-Theory-(MOST)","page":"Equations","title":"Monin-Obukhov Similarity Theory (MOST)","text":"","category":"section"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Surface fluxes of momentum, energy and moisture are computed using the Monin-Obukhov Similarity Theory (MOST), which follows from dimensional analysis and similarity laws in stratified boundary layers. The theory gives the fluxes in an unresolved surface layer based on the self-similarity of stratified boundary layers, and can be used to compute exchange coefficients for bulk-formulae for the fluxes at the bottom boundary in simulations of the atmosphere. The MOST similarity profiles depend on one length scale, given by the ratio of velocity and buoyancy scales and known as the Obukhov length:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nlabeleqmonin_obukhov_length\nL_O =  fracu_star^2 kappa b_star\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Here, star subscripts indicate a characteristic physical scale of the variable in question in the surface layer. The buoyancy (b) is defined as","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nb = g fracmathrmDSE_vmathrmDSE_v\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with mathrmDSE_v as the perturbation from a reference virtual dry static energy value, mathrmDSE. These mean and perturbation quantities are implicit in the model and can be used to compute the relation between b_star and phi_star, where phi represents a thermoynamic scale variable. Following equations (8) and (9) in [1] we write the physical scale for such a variable phi as:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nlabeleqthermodynamic_scale\nphi_star = frackappa  PrF_h(Delta zz_0phi L_O) Delta phi\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"and a corresponding momentum scale is given by:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nlabelequ_star\nu_star = frackappaF_m(Delta zz_0m L_O) Delta u\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Here kappa = 04 is the von-Karman constant, Pr is the Prandtl number and Delta corresponds to the difference in values between the two input heights (i.e. Delta u = u(z_in) - u(z_srf)). The formulation of F_m and F_h is subjective to the choice of discretization as shown in [1]. In the typical finite-difference form: ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nF_h^(FD) = log left(fracDelta zz_0b right) - psi_h left(fracDelta zL_O right) + psi_h left(fracz_0bL_O right)\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"and ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nF_m^(FD) = log left(fracDelta zz_0m right) - psi_m left(fracDelta zL_O right) + psi_m left(fracz_0mL_O right)\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Subscripts h m are used to represent the equations corresponding to the exchange of heat and momentum respectively. The characteristics of tracer diffusion are assumed to be identical to those of the thermal diffusion in this system. The expressions for psi_m and psi_h are defined in appendix A in [1] for various universal functions. Our current approach uses the Businger universal functions by default. ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"The correction for the finite volume form F_h F_m are given respectively as:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nF_h^(FV) = log left(fracDelta zz_0b right) - Psi_h left(fracDelta zL_O right) + fracz_0bDelta z Psi_h left(fracz_0bL_O right) + R_z0hleftPsi_h left(fracz_0bL_O right) - 1right\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"and ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nF_m^(FV) = log left(fracDelta zz_0m right) - Psi_m left(fracDelta zL_O right) + fracz_0mDelta z Psi_m left(fracz_0mL_O right) + R_z0mleftPsi_m left(fracz_0mL_O right) - 1right\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with Psi_m and Psi_h as the FV corrected form. Their expressions are found in appendix A in [1] and here as well we use the Businger universal functions formulation as a default. ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Note that both F_h and F_m (for FV and FD) are functions of known parameters (z_0b z_0m Delta z) and L_O only. Furthermore we can compute b_star from the known thermodynamic states. This fact makes (1) a transcendental equation with L_O as the only unknown. A numerical solver that iterate over L_O can thus find the value for which the error in (1) is smaller than some desired tolerance. ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"The most direct computation of b_star follows by writing (3) for virtual dry static energy and multiplying by a (gmathrmDSE_v) factor:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nb_star = fracg mathrmDSE_v frackappa  PrF_h(zz_0b L_O) Delta mathrmDSE_v\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with Delta mathrmDSE_v computed from the thermodynamic states at the corresponding levels. This approach forces us to assume that the various scalars that take part in the virtual dry static energy has the same roughness length z_0b but provides a straightforward implementation where any tracer (humidity or other) which plays a role in the virtual dry static energy of air is accounted for in the computation of L_O. ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"An alternative method common in atmospheric models, is to write b_star using the definition of virtual potential temperature as:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nb_star = (1+(epsilon_dv-1) q_t ) theta_star +  (epsilon_dv-1) theta q_tstar\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with theta_star and q_tstar given by (3). Here separate roughness lengths can be assumed for heat and humidity but the implementation would have to change if any additional scalar is added to the air density. For these reasons we implement (10). ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"The flux from the top of the boundary layer is given by:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\noverlinewu = - u_star^2\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\noverlinewphi = - u_star phi_star\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"which could be viewed as alternatives to bulk formula expressions for the sensible and latent heat fluxes if the physical scales are known. Correspondingly, the ratios between the physical scale and its change in the surface layer provides and expression for the exchange coefficient:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    C_m = fracu_star^2Delta u^2\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nlabeleqexchange_coeff_scalar\n    C_phi = fracu_star phi_starDelta u Deltaphi\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Equations (13) and (14) are singular if Delta u = 0, and typically a gustiness parameter w_star is added to represent the SGS convective velocity and avoid this singularity. A typical formulation for gustiness is ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    w_star = left(overlinewb h_fc right)^frac13\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"here h_fc is the height of free convection, a non local estimation of the maximum height (above the surface layer) possible of convective motions based on the atmospheric profile. This formulation of gustiness requires a priori knowledge of the surface fluxes and thus can only be used in cases with prescribed fluxes. More generally gustiness is often taken to be a some assumed constant based on scaling arguments.","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"At the same time equation (14) is also singular if Deltaphi = 0. If phi corresponds to buoyancy (mathrmDSE_v) then the conditions are neutral, and the buoyancy flux is zero. L_O is set to infinity, and the momentum exchange coefficient and heat exchange coefficient are given by the law of the wall:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nC_mN = left( frackappaln Delta zz_0m right)^2\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nC_phiN = frackappa^2ln Delta zz_0b ln Delta zz_0m\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"In neutral conditions  Once the surface conditions are known, the computation of the profile of any variable within the surface layer (for any z_sfc  z  z_in) is done by rewriting (3) and (4) as:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nphi(z) = phi_starfracF_h(zz_0phi L_O)kappa  Pr  + phi_sfc\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nu(z) = u_star fracF_m(zz_0m L_O)kappa + u_sfc\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with phi_star and u_star given by (3) and (4) respectively. Here, the same choice of discretization should be used for F_h and F_m as used to obtain the surface conditions. ","category":"page"},{"location":"SurfaceFluxes/#Roughness-Sublayer-Models","page":"Equations","title":"Roughness Sublayer Models","text":"","category":"section"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"In the case of large obstacles, such as a forest canopy, larger turbulent motions modify the wind and scalar profiles in a roughness-sublayer (RSL), which stretches from the displacement height, d (just below the canopy height, usually d=075h_c) to up to 3 times the canopy height, h_c. Observations show that in the RSL the classical MOST overestimates the phi functions and underestimates u(z). There are several approaches suggested in the literature to parameterize the RSL effects combined with the underlying canopy:  ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"\\subsubsection{1. MOST in RSL and exponential canopy profiles} Evidently, MOST could be used in the RSL with the origin of the profile at z=d (instead of z=0 as in MOST), as was suggested in [7]. However, this would give a zero wind at d, which is rarely the case in real canopies: ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    fracpartial u (z)partial z = (u_starkappa (z-d)) Phi_M(zeta) \nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with similar form suggested for scalars, except with a much smaller roughness length, to account for the \"bluff body\" effect (canopy is much more efficient at absorbing momentum compared to its ability to emit/absorb heat). ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"For the layer within the deep canopy, z  d, an exponential profile is suggested for the wind profile:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nu(z) = u_h exp((zh_c - 1) alpha)\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"where u_h = u(h_c), and alpha is the canopy flow index, dependent on the leaf morphology, density, element flexibility, geometry and (in some cases) the wind speed. Typically this is approximated by a constant, depending on the land use category. It is unclear how the authors avoid discontinuities at h_c. Note, the authors also suggest a linear interpolation-based solution around the forest edges, which is dependent on the wind direction. ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Note that CLM4.5 also uses MOST, and its canopy layer ignores the direct effects of turbulence, parameterizing u as u_*. This is suboptimal. See [8] for more details. (CLM4.5 uses a parameterisation that assumes that the wind speed within the canopy is equal to the friction velocity u_star.)","category":"page"},{"location":"SurfaceFluxes/#Modified-MOST-in-RSL","page":"Equations","title":"Modified MOST in RSL","text":"","category":"section"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"note: Note\nRoughness sublayer models are not currently implemented.","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Following [9], we can provide extensions to the MOST to capture the flow behaviour within the roughness-sublayer whose maximum height is denoted by z_*. Equation (2) in [9] corresponds to (\\ref{eq:Fhfin-diff}) in this document, and gives the velocity profiles in the surface layer following the canonical MOST. For model levels z such that d leq z leq z_star (within the RSL),  [9] suggest the following modification to the velocity gradient profile. The profile would be:","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    fracpartial u (z-d)partial z = (u_starkappa z) Phi_M(zeta)phi_M(z-dz_star-d) \nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"where Phi_M is the stability function applied in the canonical MOST theory, ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    phi_MBig(fracz-dz_star-dBig) = 05exp(ln(2)fracz-dz_star-d)\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"and is estimated from flux-tower data over flat, tree-covered terrain with z_0 ranging from 04-09 mathrmm. The stability parameter is defined by zeta = (z-d)L following the zero-plane displacement correction.","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Thus, for recovery profiles defined in \\ref{eq:velrefprofile}, the modified expression incorporating the RSL model results in ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    u(z-d) = fracu_starkappa Big(F_m + int_z_0^z  Phi_M(1-phi_M(z-dz_star-d))(z-d)^-1 dzBig) + u(z_0) \nendequation ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with non-zero u(z_0). This can also be expressed as ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    u(z-d) = fracu_starkappa Big(F_m + int_z^z_star  Phi_M(1-phi_M(z-dz_star-d))(z-d)^-1 dzBig) \nendequation for z leq z_star ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"While [9] comment on the application of surface-layer functions defined by [5], we can generalise to the family of similarity functions provided provided in the SurfaceFluxes.jl package.","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Note that K_m is also modified by phi_M if model levels reach the RSL.","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"The authors assume that the deep canopy layer (between z=0 and z=d) has no storage capacity and it gives off the same fluxes it receives from the soil. They further assume that the surface layer height h_s = 004 z_i, where z_i is the height of the planetary boundary layer (PBL).","category":"page"},{"location":"SurfaceFluxes/#Modified-MOST-in-RSL-and-exponential-canopy-profiles-coupled","page":"Equations","title":"Modified MOST in RSL and exponential canopy profiles coupled","text":"","category":"section"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"[ ] TODO: Code implementation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"The works of [10] extend the above approach to the deep canopy layer, using momentum and mass balances. Using MOST in the surface layer above RSL, and the modified MOST within the RSL allows derivation of u_h. This allows coupling via u_h from the exponential profile in the canopy: ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"u(z) = u(h_c) exp-eta(1-zh_c)","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with the attenuation factor eta = h_c (c_d a  2 l_m^2)^13 is a function of the leaf aerodynamic drag c_d, leaf area density a, and a canopy characteristic mixing length l_m. eta is often estimated empirically, but it can be used in its functional form to derive a correction to the modified MOST above, so that :","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\n    phi_MBig(fracz-d l_m betaBig) = 1-c_1exp(-c_2fracz-d l_m beta)\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with beta = u_*u(h_c) and c_2approx 05. For c_1 we need to use the modified similarity functions again. ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Although this extension was initially derived for dense canopies, [8] suggest a further modification to sparse canopies through the use of the plant area index ([8] Appendix 4 - equations A31-A34).","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"The advantage of this scheme is that there are no discontinuities in the profiles and that z^* is no longer a free parameter. The disadvantage is that it is quite complex and it is not obvious that it would perform better in a climate model that the original [9] version with the canopy layer being approximated a simpler exponential expression (e.g., assuming a constant eta) or some second-order interpolation between h_c and the surface. The [9] formulation  is much easier to implement in the current version of SurfaceFluxes.jl.","category":"page"},{"location":"SurfaceFluxes/#Evapotranspiration","page":"Equations","title":"Evapotranspiration","text":"","category":"section"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"note: Note\nThis feature has not yet been implemented in the code. ","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"Following Figure 7.3 in Bonan (2019a), we interpret the effect of canopies and other surface features on the sensible and latent heat fluxes as conductance networks. In the case of sensible heat fluxes H and diffusive evaporative fluxes E, this results in the following expressions (as in Bonan eq 7.5 and 7.6):","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nH = c_p (theta_s - theta_ref) g_ac\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nE = fracq_sat(theta_s)-q_refg_c^-1 + g_ac^-1\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"and","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\ng_w^-1 = g_c^-1 + g_ac^-1\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"where g_w is the total conductance for evapotranspiration, g_c represents the effect of canopies and surface wetness (with lower values for drier surfaces), and g_ac is the aerodynamic conductance for scalars.","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"An alternative interpretation through the use of bulk-formulae requires an adjustment of the soil wetness through a factor beta_w. In the conductance network approach, beta_w = fracg_wg_ac. We may then replace the beta_w factor in the approach using bulk-formulae with","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"beginequation\nbeta_w = fracg_cg_ac+g_c\nendequation","category":"page"},{"location":"SurfaceFluxes/","page":"Equations","title":"Equations","text":"with $ 0 (dry) \\leq \\beta \\leq 1 (wet)$.","category":"page"},{"location":"#SurfaceFluxes.jl","page":"Home","title":"SurfaceFluxes.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SurfaceFluxes","category":"page"},{"location":"#SurfaceFluxes","page":"Home","title":"SurfaceFluxes","text":"SurfaceFluxes\n\nInterface\n\nsurface_conditions computes\nMonin-Obukhov length\nPotential temperature flux (if not given) using Monin-Obukhov theory\ntransport fluxes using Monin-Obukhov theory\nfriction velocity/temperature scale/tracer scales\nexchange coefficients\n\nReferences\n\n[1]\n[2]\n\n\n\n\n\n","category":"module"},{"location":"#Core-input-types","page":"Home","title":"Core input types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SurfaceFluxes.SurfaceValues\nSurfaceFluxes.InteriorValues","category":"page"},{"location":"#SurfaceFluxes.SurfaceValues","page":"Home","title":"SurfaceFluxes.SurfaceValues","text":"SurfaceValues\n\nInput container for state variables at the ground level.\n\nFields\n\nz\nu\nts\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceFluxes.InteriorValues","page":"Home","title":"SurfaceFluxes.InteriorValues","text":"InteriorValues\n\nInput container for state variables at the first interior node.\n\nFields\n\nz\nu\nts\n\n\n\n\n\n","category":"type"},{"location":"#Dispatch-types","page":"Home","title":"Dispatch types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SurfaceFluxes.Fluxes\nSurfaceFluxes.FluxesAndFrictionVelocity\nSurfaceFluxes.Coefficients\nSurfaceFluxes.ValuesOnly","category":"page"},{"location":"#SurfaceFluxes.Fluxes","page":"Home","title":"SurfaceFluxes.Fluxes","text":"Fluxes\n\nInput container for state variables, latent and sensible heat fluxes roughness lengths, initial obukhov length and gustiness.\n\nFields\n\nstate_in\nstate_sfc\nshf\nlhf\nz0m\nz0b\ngustiness\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceFluxes.FluxesAndFrictionVelocity","page":"Home","title":"SurfaceFluxes.FluxesAndFrictionVelocity","text":"FluxesAndFrictionVelocity\n\nInput container, given surface state variables, latent and sensible heat fluxes, and the friction velocity, roughness lengths, initial obukhov length and gustiness.\n\nFields\n\nstate_in\nstate_sfc\nshf\nlhf\nustar\nz0m\nz0b\ngustiness\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceFluxes.Coefficients","page":"Home","title":"SurfaceFluxes.Coefficients","text":"Coefficients\n\nInput container, given surface state variables, and exchange coefficients,roughness lengths, initial obukhov length and gustiness.\n\nFields\n\nstate_in\nstate_sfc\nCd\nCh\nz0m\nz0b\ngustiness\nbeta\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceFluxes.ValuesOnly","page":"Home","title":"SurfaceFluxes.ValuesOnly","text":"ValuesOnly\n\nInput container, given only surface state variables, roughness lengths, initial obukhov length and gustiness.\n\nFields\n\nstate_in\nstate_sfc\nz0m\nz0b\ngustiness\nbeta\n\n\n\n\n\n","category":"type"},{"location":"#User-facing-methods","page":"Home","title":"User-facing methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SurfaceFluxes.surface_conditions\nSurfaceFluxes.recover_profile","category":"page"},{"location":"#SurfaceFluxes.surface_conditions","page":"Home","title":"SurfaceFluxes.surface_conditions","text":"surface_conditions(\n    param_set::AbstractSurfaceFluxesParameters,\n    sc::SurfaceFluxes.AbstractSurfaceConditions{FT},\n    scheme::SurfaceFluxes.SolverScheme = FVScheme();\n    tol::RS.AbstractTolerance = RS.RelativeOrAbsoluteSolutionTolerance(FT(3e-5), FT(Δz(sc) / 50)),\n    tol_neutral::FT = SFP.cp_d(param_set) / 100,\n    maxiter::Int = 10,\n    soltype::RS.SolutionType = RS.CompactSolution(),\n) where {FT}\n\nThe main user facing function of the module. It computes the surface conditions based on the Monin-Obukhov similarity functions. Requires information about thermodynamic parameters (param_set) the surface state sc, the universal function type and the discretisation scheme. Default tolerance for  Monin-Obukhov length is absolute (i.e. has units [m]). Returns the RootSolvers CompactSolution by default.\n\nResult struct of type SurfaceFluxConditions{FT} contains:\n\nL_MO:   Monin-Obukhov lengthscale\nshf:    Sensible Heat Flux\nlhf:    Latent Heat Flux\nρτxz:   Momentum Flux (Eastward component)\nρτyz:   Momentum Flux (Northward component)\nustar:  Friction velocity\nCd:     Momentum Exchange Coefficient\nCh:     Thermal Exchange Coefficient\n\n\n\n\n\n","category":"function"},{"location":"#SurfaceFluxes.recover_profile","page":"Home","title":"SurfaceFluxes.recover_profile","text":"recover_profile(param_set, sc, L_MO, Z, X_in, X_sfc, transport, uft, scheme)\n\nRecover profiles of variable X given values of Z coordinates. Follows Nishizawa equation (21,22)\n\nArguments\n\nparam_set: Abstract Parameter Set containing physical, thermodynamic parameters.\nsc: Container for surface conditions based on known combination     of the state vector, and {fluxes, friction velocity, exchange coefficients} for a given experiment\nL_MO: Monin-Obukhov length\nZ: Z coordinate(s) (within surface layer) for which variable values are required\nXin,Xsfc: For variable X, values at interior and surface nodes\ntransport: Transport type, (e.g. Momentum or Heat, used to determine physical scale coefficients)\nuft: A Universal Function type, (returned by, e.g., Businger())\nscheme: Discretization scheme (currently supports FD and FV)\n\nTODO: add tests\n\n\n\n\n\n","category":"function"},{"location":"#Universal-Functions","page":"Home","title":"Universal Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SurfaceFluxes.UniversalFunctions","category":"page"},{"location":"#SurfaceFluxes.UniversalFunctions","page":"Home","title":"SurfaceFluxes.UniversalFunctions","text":"UniversalFunctions\n\nUniversal stability and stability correction functions for SurfaceFluxes module. Supports universal functions:\n\nBusinger\nGryanik\nGrachev\nHoltslag\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"SurfaceFluxes.UniversalFunctions.Gryanik\nSurfaceFluxes.UniversalFunctions.Grachev\nSurfaceFluxes.UniversalFunctions.Businger\nSurfaceFluxes.UniversalFunctions.Holtslag","category":"page"},{"location":"#SurfaceFluxes.UniversalFunctions.Gryanik","page":"Home","title":"SurfaceFluxes.UniversalFunctions.Gryanik","text":"Gryanik <: AbstractUniversalFunction{FT}\n\nReferences\n\n[3]\n\nEquations in reference:\n\n`ϕ_m`: Eq. 13\n`ϕ_h`: Eq. 13\n`ψ_m`: Eq. 14\n`ψ_h`: Eq. 14\n\nGryanik et al. (2020) functions are used in stable conditions\n\nIn unstable conditions the functions of Businger (1971) are\n\nassigned by default.\n\nFields\n\nL: Monin-Obhukov Length\nparams\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceFluxes.UniversalFunctions.Grachev","page":"Home","title":"SurfaceFluxes.UniversalFunctions.Grachev","text":"Grachev <: AbstractUniversalFunction{FT}\n\nReferences\n\n[4]\n\nEquations in reference:\n\n`ϕ_m`: Eq. 13\n`ϕ_h`: Eq. 13\n`ψ_m`: Eq. 14\n`ψ_h`: Eq. 14\n\nGrachev (2007) functions are applicable in the\n\nstable b.l. regime (ζ >= 0). Businger (1971) functions\n\nare applied in the unstable b.l. (ζ<0) regime by\n\ndefault.\n\nFields\n\nL: Monin-Obhukov Length\nparams\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceFluxes.UniversalFunctions.Businger","page":"Home","title":"SurfaceFluxes.UniversalFunctions.Businger","text":"Businger\n\nReference\n\n[1]\n\nOriginal research\n\n[5]\n\nEquations in reference:\n\n`ϕ_m`: Eq. A1\n`ϕ_h`: Eq. A2\n`ψ_m`: Eq. A3\n`ψ_h`: Eq. A4\n\nFields\n\nL: Monin-Obhukov Length\nparams\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceFluxes.UniversalFunctions.Holtslag","page":"Home","title":"SurfaceFluxes.UniversalFunctions.Holtslag","text":"Holtslag <: AbstractUniversalFunction{FT}\n\nReferences\n\n[6]\n\nEquations in reference:\n\n`ϕ_m`: Derived from Eq. 12\n`ϕ_h`: Derived from Eq. 12\n`ψ_m`: Eq. 12\n`ψ_h`: Eq. 12\n\nHoltslag and Bruin 1988 functions are used in stable conditions\n\nIn unstable conditions the functions of Businger (1971) are\n\nassigned by default.\n\nFields\n\nL: Monin-Obhukov Length\nparams\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"SurfaceFluxes.UniversalFunctions.phi\nSurfaceFluxes.UniversalFunctions.psi\nSurfaceFluxes.UniversalFunctions.Psi","category":"page"},{"location":"#SurfaceFluxes.UniversalFunctions.phi","page":"Home","title":"SurfaceFluxes.UniversalFunctions.phi","text":"phi\n\nUniversal stability function for wind shear (ϕ_m) and temperature gradient (ϕ_h)\n\n\n\n\n\n","category":"function"},{"location":"#SurfaceFluxes.UniversalFunctions.psi","page":"Home","title":"SurfaceFluxes.UniversalFunctions.psi","text":"psi\n\nUniversal stability correction function for momentum (ψ_m) and heat (ψ_h)\n\n\n\n\n\n","category":"function"},{"location":"#SurfaceFluxes.UniversalFunctions.Psi","page":"Home","title":"SurfaceFluxes.UniversalFunctions.Psi","text":"Psi\n\nIntegral of universal stability correction function for momentum (ψ_m) and heat (ψ_h)\n\n\n\n\n\n","category":"function"}]
}
